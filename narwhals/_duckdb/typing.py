from __future__ import annotations

from typing import TYPE_CHECKING, Literal, TypedDict, Union

if TYPE_CHECKING:
    from collections.abc import Sequence

    from duckdb import Expression
    from typing_extensions import LiteralString, TypeAlias


class WindowExpressionKwargs(TypedDict, total=False):
    partition_by: Sequence[str | Expression]
    order_by: Sequence[str | Expression]
    rows_start: int | None
    rows_end: int | None
    descending: Sequence[bool]
    nulls_last: Sequence[bool]
    ignore_nulls: bool


FunctionInUse: TypeAlias = Literal[
    "abs",
    "array_agg",
    "array_position",
    "array_unique",
    "bool_and",
    "bool_or",
    "concat",
    "concat_ws",
    "contains",
    "count",
    "date_add",
    "date_trunc",
    "datepart",
    "dense_rank",
    "exp",
    "first_value",
    "greatest",
    "isfinite",
    "isnan",
    "isnull",
    "isodow",
    "kurtosis_pop",
    "lag",
    "last_value",
    "least",
    "len",
    "list_append",
    "list_contains",
    "list_distinct",
    "list_extract",
    "log",
    "max",
    "mean",
    "median",
    "microsecond",
    "millisecond",
    "min",
    "mode",
    "nanosecond",
    "product",
    "quantile_cont",
    "rank",
    "round",
    "row_number",
    "second",
    "skewness",
    "sqrt",
    "std",
    "stddev_pop",
    "stddev_samp",
    "strftime",
    "strptime",
    "struct_extract",
    "sum",
    "unnest",
    "var",
    "var_pop",
    "var_samp",
]
"""Every function name *we've used* in `duckdb.FunctionExpression(...)`."""

FunctionExperimentalSpark: TypeAlias = Literal[
    "acos",
    "add",
    "any_value",
    "approx_count_distinct",
    "array_concat",
    "array_contains",
    "array_distinct",
    "array_extract",
    "array_intersect",
    "array_slice",
    "array_sort",
    "array_to_string",
    "ascii",
    "asin",
    "atan",
    "atan2",
    "avg",
    "base64",
    "cbrt",
    "ceil",
    "chr",
    "corr",
    "cos",
    "cot",
    "covar_pop",
    "covar_samp",
    "date_diff",
    "day",
    "dayofweek",
    "dayofyear",
    "degrees",
    "encode",
    "factorial",
    "first",
    "flatten",
    "floor",
    "from_base64",
    "generate_series",
    "hex",
    "hour",
    "ilike_escape",
    "instr",
    "last",
    "last_day",
    "length",
    "levenshtein",
    "like_escape",
    "list",
    "list_concatrpad",
    "list_filter",
    "list_has_any",
    "list_position",
    "list_prepend",
    "list_resize",
    "list_slice",
    "list_sort",
    "list_transform",
    "list_value",
    "list_zip",
    "ln",
    "log2",
    "lower",
    "lpad",
    "ltrim",
    "md5",
    "minute",
    "month",
    "now",
    "nullif",
    "octet_length",
    "pi",
    "pow",
    "printf",
    "quarter",
    "radians",
    "random",
    "regexp_extract",
    "regexp_extract_all",
    "regexp_matches",
    "regexp_replace",
    "regexp_split_to_array",
    "repeat",
    "reverse",
    "round_even",
    "rtrim",
    "sha256",
    "sign",
    "sin",
    "split_part",
    "starts_with",
    "string_split",
    "struct_pack",
    "substring",
    "subtract",
    "suffix",
    "tan",
    "to_months",
    "today",
    "trim",
    "unhex",
    "upper",
    "weekofyear",
    "year",
]
"""Function names used in `duckdb.experimental.spark.sql`."""

FunctionName: TypeAlias = Union[FunctionInUse, FunctionExperimentalSpark, "LiteralString"]
"""Every function name *allowed* in `duckdb.FunctionExpression(...)`."""

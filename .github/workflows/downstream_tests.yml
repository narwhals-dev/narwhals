name: Test Downstream Libraries - Fast

on:
  pull_request:
  push:
    branches: [main]

env:
  PY_COLORS: 1

jobs:
  altair:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: altair-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-altair
        run: |
          git clone https://github.com/vega/altair.git --depth=1
          cd altair
          git log
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools --system
      - name: install-altair-dev
        run: |
          cd altair
          uv pip install -e ".[dev, all]" --system
      - name: install-narwhals-dev
        run: |
          uv pip uninstall narwhals --system
          uv pip install -e . --system
      - name: show-deps
        run: uv pip freeze
      - name: Run pytest
        run: |
          cd altair
          pytest tests
      - name: Run mypy
        run: |
          cd altair
          mypy altair tests

  marimo:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]
        dependencies: ["core,optional"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: marimo-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-marimo
        run: |
          git clone https://github.com/marimo-team/marimo.git --depth=1
          cd marimo
          uv venv -p 3.12
          git log
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools hatch --system
      - name: install-marimo-dev
        run: |
          cd marimo
          . .venv/bin/activate
          uv pip install -e ".[dev]"
          which python
      - name: install-narwhals-dev
        run: |
          cd marimo
          . .venv/bin/activate
          uv pip uninstall narwhals
          uv pip install -e ./..
      - name: show-deps
        run: |
          cd marimo
          . .venv/bin/activate
          uv pip freeze
      - name: Create assets directory, copy over index.html
        continue-on-error: true
        run: |
          mkdir -p marimo/marimo/_static/assets
          cp marimo/frontend/index.html marimo/marimo/_static/index.html
          cp marimo/frontend/public/favicon.ico marimo/marimo/_static/favicon.ico
      - name: Run tests with full dependencies
        if: ${{ matrix.dependencies == 'core,optional' }}
        run: |
          cd marimo
          . .venv/bin/activate
          # make sure that we use the .venv when running tests, so that
          # the local narwhals install is picked up
          sed -i '/^\[tool.hatch.envs.default\]/a path = ".venv"' pyproject.toml
          hatch run python -c "import narwhals; print(narwhals.__file__)"
          hatch run +py=${{ matrix.python-version }} test-optional:test-narwhals
        timeout-minutes: 15

  scikit-lego:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: sklego-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-scikit-lego
        run: git clone https://github.com/koaning/scikit-lego.git --depth 1
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools --system
      - name: install-scikit-lego-dev
        run: |
          cd scikit-lego
          uv pip install -e ".[test]" --system
      - name: install-narwhals-dev
        run: |
          uv pip uninstall narwhals --system
          uv pip install -e . --system
      - name: show-deps
        run: uv pip freeze
      - name: Run pytest
        run: |
          cd scikit-lego
          pytest -n auto --disable-warnings --cov=sklego -m "not cvxpy and not formulaic and not umap"

  shiny:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: shiny-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-shiny
        run: |
          git clone https://github.com/posit-dev/py-shiny.git
          cd py-shiny
          uv venv -p ${{ matrix.python-version }}
          git log
      - name: install-basics
        run: |
          cd py-shiny
          . .venv/bin/activate
          uv pip install --upgrade tox virtualenv setuptools
      - name: install-shiny-dev
        run: |
          cd py-shiny
          . .venv/bin/activate
          # temporary to get CI green
          uv pip install "chatlas<0.9.0"
          make narwhals-install-shiny
      - name: install-narwhals-dev
        run: |
          cd py-shiny
          . .venv/bin/activate
          uv pip uninstall narwhals
          uv pip install -e ./..
      - name: show-deps
        run: |
          cd py-shiny
          . .venv/bin/activate
          uv pip freeze
      - name: Run `make narwhals-test-integration`
        run: |
          cd py-shiny
          . .venv/bin/activate
          # Isort seems to behave slightly differently in CI
          # so we ignore its output
          make format -s
          make narwhals-test-integration

  tea-tasting:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: clone-tea-tasting
        run: |
          git clone https://github.com/e10v/tea-tasting.git --depth=1
          cd tea-tasting
          git log
      - name: install-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-suffix: tea-tasting-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
          python-version: ${{ matrix.python-version }}
      - name: install-tea-tasting-test
        run: |
          cd tea-tasting
          uv sync --group test
      - name: install-narwhals-dev
        run: |
          cd tea-tasting
          uv pip uninstall narwhals
          uv pip install -e ./..
      - name: show-deps
        run: |
          cd tea-tasting
          uv pip freeze
      - name: run-pytest
        run: |
          cd tea-tasting
          # empty pytest.ini to avoid pytest using narwhals configs
          touch pytest.ini
          uv run --no-sync pytest tests

  tubular:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: tubular-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-tubular
        run: |
          git clone https://github.com/lvgig/tubular --depth=1
          cd tubular
          git log
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools pytest-env --system
      - name: install-tubular-dev
        run: |
          cd tubular
          uv pip install -e ".[dev]" --system
      - name: install-narwhals-dev
        run: |
          uv pip uninstall narwhals --system
          uv pip install -e . --system
          # temporary pin to get CI green
          uv pip install "polars<1.30" --system
      - name: show-deps
        run: uv pip freeze
      - name: Run pytest
        run: |
          cd tubular
          pytest tests --config-file=pyproject.toml

  plotly:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: plotly-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-plotly
        run: |
          git clone https://github.com/plotly/plotly.py --depth=1
          cd plotly.py
          git log
      - name: install-deps
        run: |
          cd plotly.py
          uv venv -p ${{ matrix.python-version }}
          uv sync --extra dev_optional
      - name: install-narwhals-dev
        run: |
          cd plotly.py
          . .venv/bin/activate
          uv pip uninstall narwhals
          uv pip install -e ./..
      - name: show-deps
        run: |
          cd plotly.py
          . .venv/bin/activate
          uv pip freeze
      - name: Run pytest on plotly express
        run: |
          cd plotly.py
          . .venv/bin/activate
          pytest tests/test_optional/test_px

  hierarchicalforecast:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: hierarchicalforecast-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-hierarchicalforecast
        run: |
          git clone https://github.com/Nixtla/hierarchicalforecast --depth=1
          cd hierarchicalforecast
          git log
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools --system
      - name: install-deps
        run: |
          cd hierarchicalforecast
          uv pip install --system ".[dev]"
      - name: install-narwhals-dev
        run: |
          uv pip uninstall narwhals --system
          uv pip install -e . --system
      - name: show-deps
        run: uv pip freeze
      - name: Run tests
        run: |
          cd hierarchicalforecast
          nbdev_test --do_print --timing --n_workers 0

  formulaic:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: formulaic-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-formulaic
        run: |
          git clone https://github.com/matthewwardrop/formulaic.git --depth=1
          cd formulaic
          git log
      - name: create-hatch-env
        run: |
          cd formulaic
          uv pip install hatch hatch-vcs --system
      - name: install-formulaic-dev
        run: |
          cd formulaic
          hatch run uv pip install -e ".[arrow,calculus]"
      - name: install-narwhals-dev
        run: |
          cd formulaic
          hatch run uv pip uninstall narwhals
          hatch run uv pip install -e ./..
      - name: show-deps
        run: hatch run uv pip freeze
      - name: run test
        run: |
          cd formulaic
          hatch run tests --config-file=pyproject.toml

  pointblank:
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: pointblank-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-pointblank
        run: |
          git clone https://github.com/posit-dev/pointblank.git --depth=1
          cd pointblank
          git log
      - name: install-basics
        run: uv pip install --upgrade tox virtualenv setuptools --system
      - name: install-deps
        run: |
          cd pointblank
          uv venv -p ${{ matrix.python-version }}
          . .venv/bin/activate
          uv pip install . --group dev
          uv pip install pytest pytest-cov pytest-snapshot pandas polars "ibis-framework[duckdb,mysql,postgres,sqlite]>=9.5.0" chatlas shiny
      - name: install-narwhals-dev
        run: |
          cd pointblank
          . .venv/bin/activate
          uv pip uninstall narwhals
          uv pip install -e .
      - name: show-deps
        run: |
          cd pointblank
          . .venv/bin/activate
          uv pip freeze
      - name: Run tests
        run: |
          cd pointblank
          . .venv/bin/activate
          # make sure that we use the .venv when running tests, so that
          # the local narwhals install is picked up
          sed -i 's/uv run pytest/uv run --no-sync pytest/g' Makefile
          make test

  validoopsie:
    strategy:
      matrix:
        python-version: ["3.9", "3.12"] # 3.9 and 3.12 are enough to cover all the tests
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: validoopsie-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-validoopsie
        run: |
          git clone https://github.com/akmalsoliev/Validoopsie.git --depth=1 validoopsie
          cd validoopsie
          git log
      - name: install-validoopsie-dev
        run: |
          cd validoopsie
          uv sync --dev
      - name: install-narwhals-dev
        run: |
          cd validoopsie
          uv remove narwhals
          uv add ./..
      - name: show-deps
        run: |
          cd validoopsie
          which python
          uv pip freeze
      - name: Run tests
        run: |
          cd validoopsie
          # empty pytest.ini to avoid pytest using narwhals configs
          touch pytest.ini
          touch tests/__init__.py
          touch tests/utils/__init__.py
          # Keep `--no-sync` in case Narwhals is re-synced with PyPI version
          uv run --no-sync pytest tests
        timeout-minutes: 15
  
  darts:
    strategy:
      matrix:
        python-version: ["3.11"]
        os: ["ubuntu-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: "true"
          cache-suffix: darts-${{ matrix.python-version }}
          cache-dependency-glob: "pyproject.toml"
      - name: clone-darts
        run: |
          git clone https://github.com/unit8co/darts.git --depth=1
          cd darts
          git log
      - name: install-deps
        run: |
          cd darts
          uv pip install -r requirements/core.txt -r requirements/dev.txt --system
      - name: install-narwhals-dev
        run: |
          uv pip uninstall narwhals --system
          # TODO(FBruzzesi): Install polars from darts requirements when they introcude it
          uv pip install -e ".[polars]" --system
      - name: show-deps
        run: uv pip freeze
      - name: Run tests
        run: |
          cd darts
          pytest darts/tests/test_timeseries.py
          pytest darts/tests/test_timeseries_multivariate.py
          pytest darts/tests/test_timeseries_static_covariates.py

  # executing the build and test process takes around 10 minutes
  # build bokeh process emulating the build process used in the main bokeh repo
  # in order to tolerate possible updates in the .yaml files
  build-bokeh:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash -l {0}
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Clone Bokeh repository
        run: |
          git clone --single-branch -b branch-3.8 https://github.com/bokeh/bokeh.git
          cd bokeh
          git log --oneline -n 5
          
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: 'latest'
          activate-environment: bk-test
          conda-remove-defaults: true
          
      - name: Install libmamba solver
        run: |
          conda install -q -n base conda-libmamba-solver
          conda config --set solver libmamba
          
      - name: Update bk-test environment
        working-directory: bokeh
        run: |
          conda env update -q -n bk-test -f conda/environment-build.yml
          
      - name: Install node modules
        working-directory: bokeh
        run: |
          bash scripts/ci/install_node_modules.sh
          
      - name: Build BokehJS
        working-directory: bokeh/bokehjs
        run: |
          node make build
          
      - name: Build pip packages
        working-directory: bokeh
        env:
          BOKEHJS_ACTION: 'install'
        run: |
          python -m build .
          
      - name: Verify pip install from sdist
        working-directory: bokeh
        run: |
          bash scripts/ci/verify_pip_install_from_sdist.sh
          
      - name: Verify pip install using sdist
        working-directory: bokeh
        run: |
          bash scripts/ci/verify_pip_install_using_sdist.sh
          
      - name: Verify pip install using wheel
        working-directory: bokeh
        run: |
          bash scripts/ci/verify_pip_install_using_wheel.sh
          
      - name: Build conda package
        working-directory: bokeh
        run: |
          bash scripts/ci/build_conda_package.sh
          
      - name: Verify conda install
        working-directory: bokeh
        run: |
          bash scripts/ci/verify_conda_install.sh
          
      - name: Upload wheel package
        uses: actions/upload-artifact@v4
        with:
          name: bokeh-wheel-package
          path: bokeh/dist/bokeh-*-py3-none-any.whl
          
      - name: Upload bokehjs package
        uses: actions/upload-artifact@v4
        with:
          name: bokehjs-package
          path: bokeh/bokehjs/build/dist/bokeh-bokehjs-*.tgz

  bokeh:
    needs: build-bokeh
    
    strategy:
      matrix:
        python-version: ["3.12"]
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: bash -l {0}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Clone Bokeh repository
        run: |
          git clone --single-branch -b branch-3.8 https://github.com/bokeh/bokeh.git
          cd bokeh
          git log --oneline -n 5
          
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: 'latest'
          activate-environment: bk-test
          conda-remove-defaults: true
          
      - name: Install libmamba solver
        run: |
          conda install -q -n base conda-libmamba-solver
          conda config --set solver libmamba
          
      - name: Update conda environment
        working-directory: bokeh
        run: |
          # Install conda dependencies using Bokeh's test environment
          conda env update -q -n bk-test -f conda/environment-test-${{ matrix.python-version }}.yml
          
      - name: Download wheel package
        uses: actions/download-artifact@v4
        with:
          name: bokeh-wheel-package
          path: bokeh/dist/
          
      - name: Install wheel package
        run: |
          pip install bokeh/dist/bokeh-*-py3-none-any.whl
          
      - name: Download bokehjs package
        uses: actions/download-artifact@v4
        with:
          name: bokehjs-package
          path: bokeh/bokehjs/build/dist/
          
      - name: Symlink bokehjs package
        working-directory: bokeh/bokehjs/build/dist/
        run: |
          ln -s $(ls -t bokeh-bokehjs-*.tgz | head -n 1) bokeh-bokehjs.tgz
          
      - name: List installed software
        run: |
          conda info
          conda list
          echo "node $(node --version)"
          echo "npm $(npm --version)"
          python --version
          
      - name: Install narwhals in development mode
        run: |
          pip uninstall -y narwhals
          pip install -e .
          
      - name: Ensure Python version
        run: |
          if [[ ! "$(python --version | cut -d' ' -f2)" == "${{ matrix.python-version }}"* ]]; then 
            echo "Python version mismatch!"
            python --version
            exit 1
          fi
          
      - name: Test Bokeh defaults
        working-directory: bokeh
        run: |
          pytest tests/test_defaults.py
          
      - name: Test Bokeh cross
        working-directory: bokeh
        run: |
          pytest tests/test_cross.py
          
      - name: Run Bokeh unit tests
        working-directory: bokeh
        if: success() || failure()
        run: |
          COLOR="--color=yes"
          COVERAGE="--cov=bokeh --cov-report=xml"
          POLICY="--last-failed --last-failed-no-failures none"
          pytest $COLOR $COVERAGE tests/unit || pytest $COLOR $POLICY tests/unit
          

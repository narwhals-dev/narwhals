# Reference: https://packaging.python.org/en/latest/guides/writing-pyproject-toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "narwhals"
version = "1.32.0"
dependencies = []
requires-python = ">=3.8"
authors = [
  { name = "Marco Gorelli", email = "33491632+MarcoGorelli@users.noreply.github.com" },
]
description = "Extremely lightweight compatibility layer between dataframe libraries"
readme = "README.md"
keywords = ["dataframes", "interoperability", "pandas", "polars", "pyarrow", "dask", "modin", "cudf"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/narwhals-dev/narwhals"
Documentation = "https://narwhals-dev.github.io/narwhals/"
Repository = "https://github.com/narwhals-dev/narwhals"
"Bug Tracker" = "https://github.com/narwhals-dev/narwhals/issues"

[project.optional-dependencies]
# These should be aligned with MIN_VERSIONS in narwhals/utils.py
# Exception: modin, because `modin.__version__` isn't aligned with
# `modin.pandas.__version__`. The latter is the one that we make
# API decisions based on, so that's the one we track internally.
# We have yet to determine the minimum Modin version we support
# https://github.com/narwhals-dev/narwhals/issues/817 
pandas = ["pandas>=0.25.3"]
modin = ["modin"]
cudf = ["cudf>=24.10.0"]
pyarrow = ["pyarrow>=11.0.0"]
pyspark = ["pyspark>=3.5.0"]
polars = ["polars>=0.20.3"]
dask = ["dask[dataframe]>=2024.8"]
duckdb = ["duckdb>=1.0"]
ibis = ["ibis-framework>=6.0.0", "rich", "packaging", "pyarrow_hotfix"]
sqlframe = ["sqlframe>=3.22.0"]

[dependency-groups]
core = [
  "narwhals[duckdb,pandas,polars,pyarrow,sqlframe]"
] 
tests = [
  "covdefaults",
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "pytest-env",
  "hypothesis",
]
extra = [  # heavier dependencies we don't necessarily need in every testing job
  "scikit-learn",
]
typing = [
  "hypothesis",
  "pytest",
  "pandas-stubs==2.2.3.250308",
  "typing_extensions",
  "mypy~=1.15.0",
  "pyright",
  "pyarrow-stubs==17.18",
  "sqlframe==3.24.1",
  "polars==1.25.2",
  "uv",
]
docs = [
  "black",  # required by mkdocstrings_handlers
  "jinja2",
  "duckdb",
  "markdown-exec[ansi]",
  "mkdocs",
  "mkdocs-autorefs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mkdocstrings-python>=1.16",
  "sqlframe",
  "pandas",
  "polars>=1.0.0",
  "pyarrow",
]
dev = [
  "pre-commit",
  {include-group = "tests"},
  {include-group = "typing"},
]
dev-core = [
  {include-group = "dev"},
  {include-group = "core"},
]
core-tests = [
  {include-group = "core"},
  {include-group = "tests"},
]
local-dev = [
  {include-group = "dev"},
  {include-group = "core"},
  {include-group = "docs"}
]

[tool.hatch.build]
exclude = [
  "/.*",
  "/docs",
  "/tests",
  "/tpch",
  "/utils",
  ".gitignore",
  "CONTRIBUTING.md",
  "mkdocs.yml",
  "noxfile.py",
]

[tool.ruff]
line-length = 90
fix = true
target-version = "py38"
extend-exclude = ["utils/bump_version.py", "**/this.py"]

[tool.ruff.lint]
preview = true
explicit-preview-rules = true

extend-safe-fixes = [
  "C419",    # unnecessary-comprehension-in-call
  "C420",    # unnecessary-dict-comprehension-for-iterable
  "PLR6201", # literal-membership
  "TC",      # flake8-type-checking
  "UP",      # pyupgrade
]
extend-select = [
  "PLR6201", # literal-membership
]
select = ["ALL"]
ignore = [
  "A001",    # builtin-variable-shadowing
  "A004",    # builtin-import-shadowing
  "A005",    # stdlib-module-shadowing
  "ARG002",  # unused-method-argument
  "ANN401",  # any-type
  "C901",    # complex-structure
  "COM812",  # missing-trailing-comma
  "D100",    # undocumented-public-module
  "D101",    # undocumented-public-class
  "D102",    # undocumented-public-method
  "D103",    # undocumented-public-function
  "D104",    # undocumented-public-package
  "D105",    # undocumented-magic-method
  "D107",    # undocumented-public-init
  "DTZ001",  # call-datetime-without-tzinfo
  "E501",    # line-too-long
  "FIX",     # flake8-fixme
  "ISC001",  # single-line-implicit-string-concatenation
  "PD003",   # pandas-use-of-dot-is-null
  "PD010",   # pandas-use-of-dot-pivot-or-unstack
  "PD901",   # pandas-df-variable-name (This is a auxiliary library so dataframe variables have no concrete business meaning)
  "PLR0911", # too-many-return-statements
  "PLR0912", # too-many-branches
  "PLR0913", # too-many-arguments
  "PLR2004", # magic-value-comparison
  "RET505",  # superfluous-else-return
  "SLF001",  # private-member-access
  "TD003",   # missing-todo-link
  "TD004",   # missing-todo-colon
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["format"]

[tool.ruff.lint.per-file-ignores]
"narwhals/expr_dt.py" = ["RUF002"]
"tests/*" = ["S101"]
"tpch/tests/*" = ["S101"]
"utils/*" = ["S311", "PTH123"]
"tpch/execute/*" = ["T201"]
"tpch/notebooks/*" = [
  "ANN001",
  "ANN201",
  "EM101",
  "EXE002",
  "PTH123",
  "T203",
  "TRY003",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
norecursedirs =  ['*.egg', '.*', '_darcs', 'build', 'CVS', 'dist', 'node_modules', 'venv', '{arch}', 'narwhals/_*']
testpaths = ["tests"]
filterwarnings = [
  "error",
  'ignore:.*defaulting to pandas implementation',
  'ignore:.*implementation has mismatches with pandas',
  'ignore:.*You are using pyarrow version',
  # This warning was temporarily raised by pandas but then reverted.
  'ignore:.*Passing a BlockManager to DataFrame:DeprecationWarning',
  # This warning was temporarily raised by Polars but then reverted.
  'ignore:.*The default coalesce behavior of left join will change:DeprecationWarning',
  'ignore: unclosed <socket.socket',
  'ignore:.*The distutils package is deprecated and slated for removal in Python 3.12:DeprecationWarning:pyspark',
  'ignore:.*distutils Version classes are deprecated. Use packaging.version instead.*:DeprecationWarning:pyspark',
  'ignore:.*is_datetime64tz_dtype is deprecated and will be removed in a future version.*:DeprecationWarning:pyspark',
  # Warning raised by PyArrow nightly just by importing pandas
  'ignore:.*Python binding for RankQuantileOptions not exposed:RuntimeWarning:pyarrow',
  'ignore:.*pandas only supports SQLAlchemy:UserWarning:sqlframe',
  'ignore:.*numpy.core is deprecated and has been renamed to numpy._core.*:DeprecationWarning:sqlframe',
  "ignore:.*__array__ implementation doesn't accept a copy keyword, so passing copy=False failed:DeprecationWarning:modin",
  # raised internally by pandas
  "ignore:.*np.find_common_type is deprecated:DeprecationWarning:pandas",
]
xfail_strict = true
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
env = [
  "MODIN_ENGINE=python",
  "PYARROW_IGNORE_TIMEZONE=1",
  "TZ=UTC",
]

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.coverage.report]
fail_under = 80  # This is just for local development, in CI we set it to 100
omit = [
  'narwhals/typing.py',
  'narwhals/stable/v1/typing.py',
  'narwhals/this.py',
  'narwhals/_arrow/typing.py',
  'narwhals/_duckdb/typing.py',
  'narwhals/_spark_like/typing.py',
  # we can't run this in every environment that we measure coverage on due to upper-bound constraits
  'narwhals/_ibis/*',
  # we don't run these in every environment
  'tests/ibis_test.py',
  # Remove after finishing eager sub-protocols
  'narwhals/_compliant/*',
]
exclude_also = [
  "if sys.version_info() <",
  "if .*implementation is Implementation.CUDF",
  "if .*implementation is Implementation.PYSPARK",
  "if .*implementation.is_cudf",
  "if .*implementation.is_pyspark",
  'request.applymarker\(pytest.mark.xfail',
  'backend_version <',
  'if "cudf" in str\(constructor',
  'if "pyspark" in str\(constructor',
  'pytest.skip\('
]

[tool.mypy]
files = ["narwhals", "tests"]
pretty = true
strict = true

[[tool.mypy.overrides]]
module = [
  "cudf.*",
  "dask.*",
  "dask_expr.*",
  "duckdb.*",
  "ibis.*",
  "modin.*",
  "numpy.*",
  "sklearn.*",
  "pyspark.*",
]
# TODO: remove follow_imports
follow_imports = "skip"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "*._expression_parsing",
  "*.utils",
  "*._pandas_like.*",
  "*._ibis.*",
  "*._arrow.*",
  "*._dask.*",
  "*._spark_like.*",
]
warn_return_any = false

[tool.pyright]
pythonPlatform = "All"
# NOTE (stubs do unsafe `TypeAlias` and `TypeVar` imports)
# pythonVersion = "3.8"
reportMissingImports = "none"
reportMissingModuleSource = "none"
reportPrivateImportUsage = "none"
reportUnusedExpression = "none"    # handled by (https://docs.astral.sh/ruff/rules/unused-variable/)
typeCheckingMode = "basic"
include = ["narwhals", "tests"]
ignore = [
  "../.venv/",
  "../../../**/Lib",      # stdlib
  "../../../**/typeshed*" # typeshed-fallback
]

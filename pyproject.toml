# Reference: https://packaging.python.org/en/latest/guides/writing-pyproject-toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "narwhals"
version = "1.21.0"
dependencies = []
requires-python = ">=3.8"
authors = [
  { name = "Marco Gorelli", email = "33491632+MarcoGorelli@users.noreply.github.com" },
]
description = "Extremely lightweight compatibility layer between dataframe libraries"
readme = "README.md"
keywords = ["dataframes", "interoperability", "pandas", "polars", "pyarrow", "dask", "modin", "cudf"]
license = {file = "LICENSE.md"}
classifiers = [
  "Programming Language :: Python",
  "Operating System :: OS Independent",
]

[project.optional-dependencies]
# These should be aligned with MIN_VERSIONS in narwhals/utils.py
# Exception: modin, because `modin.__version__` isn't aligned with
# `modin.pandas.__version__`. The latter is the one that we make
# API decisions based on, so that's the one we track internally.
# We have yet to determine the minimum Modin version we support
# https://github.com/narwhals-dev/narwhals/issues/817 
pandas = ["pandas>=0.25.3"]
modin = ["modin"]
cudf = ["cudf>=24.10.0"]
pyarrow = ["pyarrow>=11.0.0"]
pyspark = ["pyspark>=3.3.0"]
polars = ["polars>=0.20.3"]
dask = ["dask[dataframe]>=2024.8"]
duckdb = ["duckdb>=1.0"]
ibis = ["ibis-framework>=6.0.0", "rich", "packaging", "pyarrow_hotfix"]
dev = [
  "covdefaults",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-randomly",
  "pytest-env",
  "hypothesis",
  "typing_extensions",
]
core = [
  "duckdb",
  "pandas",
  "polars",
  "pyarrow",
  "pyarrow-stubs",
]
extra = [  # heavier dependencies we don't necessarily need in every testing job
  "scikit-learn",
]
docs = [
  "black",  # required by mkdocstrings_handlers
  "jinja2",
  "duckdb",
  "markdown-exec[ansi]",
  "mkdocs",
  "mkdocs-autorefs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "pandas",
  "polars>=1.0.0",
  "pyarrow",
]

[project.urls]
Homepage = "https://github.com/narwhals-dev/narwhals"
Documentation = "https://narwhals-dev.github.io/narwhals/"
Repository = "https://github.com/narwhals-dev/narwhals"
"Bug Tracker" = "https://github.com/narwhals-dev/narwhals/issues"

[tool.hatch.build]
exclude = [
  "/.*",
  "/docs",
  "/tests",
  "/tpch",
  "/utils",
  ".gitignore",
  "CONTRIBUTING.md",
  "mkdocs.yml",
  "noxfile.py",
]


[tool.ruff]
line-length = 90
fix = true
target-version = "py38"

lint.select = [
  "ALL",
]
lint.ignore = [
  "A001",
  "A004",
  "ARG002",
  "ANN401",
  "C901",
  "COM812",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "DTZ001",
  "E501",
  "FIX",
  "ISC001",
  "PD003",
  "PD010",
  "PD901",  # This is a auxiliary library so dataframe variables have no concrete business meaning
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR2004",
  "RET505",
  "SLF001",
  "TD003",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"tpch/tests/*" = ["S101"]
"utils/*" = ["S311", "PTH123"]
"tpch/execute/*" = ["T201"]
"tpch/notebooks/*" = [
  "ANN001",
  "ANN201",
  "EM101",
  "EXE002",
  "PTH123",
  "T203",
  "TRY003",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
  "error",
  'ignore:.*defaulting to pandas implementation',
  'ignore:.*implementation has mismatches with pandas',
  'ignore:.*You are using pyarrow version',
  # This warning was temporarily raised by pandas but then reverted.
  'ignore:.*Passing a BlockManager to DataFrame:DeprecationWarning',
]
xfail_strict = true
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
env = [
  "MODIN_ENGINE=python",
]

[tool.coverage.run]
plugins = ["covdefaults"]

[tool.coverage.report]
fail_under = 80  # This is just for local development, in CI we set it to 100
omit = [
  'narwhals/typing.py',
  'narwhals/stable/v1/typing.py',
  'narwhals/this.py',
  # we can't run this in every environment that we measure coverage on due to upper-bound constraits
  'narwhals/_ibis/*',
  # the latest pyspark (3.5) doesn't officially support Python 3.12 and 3.13
  'narwhals/_spark_like/*',
  # we don't run these in every environment
  'tests/spark_like_test.py',
]
exclude_also = [
  "if sys.version_info() <",
  "if .*implementation is Implementation.CUDF",
  "if .*implementation.is_cudf",
  'request.applymarker\(pytest.mark.xfail',
  'backend_version <',
  'if "cudf" in str\(constructor'
]

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
# the pandas API is just too inconsistent for type hinting to be useful.
module = [
  "pandas.*",
  "cudf.*",
  "modin.*",
]
ignore_missing_imports = true
